#!/bin/bash

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
SCRIPT_PATH=$(dirname $0)
SCRIPT_NAME=$(basename $0)
INSTALL_DIR="$HOME/hiveos-install" # Change this to your desired directory
url=""
root_dev=""
farm_hash=""
farm=""
thishive=0
[[ $(uname -sr) == *hive* ]] && thishive=1

# Prevent start from the local console
[[ $(tty) == *tty* || ! -z $DISPLAY ]] && echo "This script doesn't work in the local console. Exit" && exit

# Get root
if [[ $(id -u) -ne 0 ]]; then
  echo "Root privileges required"
  sudo chmod +x $0
  exec sudo $0
fi

function download_hive_image {
  # Download the HiveOS image file and place it in the chosen directory
  echo -e "${GREEN}\nDownloading HiveOS image${NOCOLOR}"
  wget -q --show-progress https://download.hiveos.farm/history/hiveos-0.6-222-stable@230512.img.xz -O $INSTALL_DIR/hiveos-0.6-222-stable@230512.img.xz
  [[ $? -ne 0 ]] && echo "${RED}Download Hive OS image failed. Check the URL${NOCOLOR}" && exit 1
}

# Call the download function to fetch the HiveOS image
download_hive_image

function get {
  # Remove the previous HiveOS image download check
  # ...

  while true; do
    echo -en "${GREEN}\nLink|path to XZ-compressed HiveOS image (HTTP|FTP link or local|NFS path): ${NOCOLOR}"
    read answer
    [[ ! -z $answer ]] && url=$answer

    # Copy|download HiveOS image to the chosen directory
    echo -e "${GREEN}\nGet HiveOS image${NOCOLOR}"
    if [[ "$url" == *http* || "$url" == *ftp* ]]; then
      echo ""
      wget -t 5 --show-progress $url -O $INSTALL_DIR/hiveos-0.6-222-stable@230512.img.xz
      if [[ $? -ne 0 ]]; then
        echo "${RED}Download Hive OS image failed. Check URL${NOCOLOR}"
      else
        break  # Break out of the loop on successful download
      fi
    else
      [[ ! -f $url ]] && echo "${RED}Hive OS image not found. Check path${NOCOLOR}" || break  # Break out of the loop if the file exists
    fi
  done
}

# Rest of the script refers to $TMPDIR
# Update these references to use $INSTALL_DIR

# Get HiveOS image
flag_get=1
while [[ $flag_get -ne 0 ]]; do
  get
  flag_get=$?
  if [[ $flag_get -ne 0 ]]; then
    repeat="y"
    echo -en "You want to try again (Y/n) : "
    read answer
    [[ ! -z $answer ]] && repeat=$answer
    [[ $repeat != y* && $repeat != Y* ]] && echo -e "${YELLOW}\nBye, bye!${NOCOLOR}" && exit
  fi
done

# Disable kernel messages to tty
echo 0 > /proc/sys/kernel/printk
echo 1 > /proc/sys/kernel/sysrq
echo 0 > /proc/sysrq-trigger

# Stop services and remount RO
swapoff -a
echo -e "${YELLOW}\nStop services${NOCOLOR}"

[[ $thishive -eq 1 ]] && miner stop > /dev/null 2>&1 && killall xinit

for SOCKET in $(systemctl list-units -t socket | awk '{print $1}' | grep -v -e ssh | grep -v -e ssh | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions); do
  systemctl stop $SOCKET > /dev/null 2>&1
done

for SERVICE in $(systemctl list-units -t service | awk '{print $1}' | grep -v -e ssh | grep -v -e ssh | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions); do
  systemctl stop $SERVICE > /dev/null 2>&1
done

pid="1"
while [[ ! -z $pid ]]; do
  pid=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | sed '2!d' | awk '{print $2}')
  [[ -z $pid ]] && continue
  process=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | sed '2!d' | awk '{print $1}')
  echo -e "Kill $process"
  kill $pid
  sleep 1
done

for MOUNTS in $(cat /proc/mounts | grep $DISK_NAME | awk '{print $2}'); do
  mount -n -o remount,ro $MOUNTS > /dev/null 2>&1
done

## Get config partition and mount it to loop
arch=$(ls $INSTALL_DIR/*hive*img.xz)
xzcat $arch | dd of=$INSTALL_DIR/conf.img bs=1M count=50 iflag=fullblock > /dev/null 2>&1
begin_conf=$(( $(fdisk -l $INSTALL_DIR/conf.img | grep NTFS | awk '{print $2}') * 512 ))
conf_loop=$(losetup -f)
losetup -o $begin_conf $conf_loop $INSTALL_DIR/conf.img
mkdir $INSTALL_DIR/hive-config
mount $conf_loop $INSTALL_DIR/hive-config

if [[ -f $INSTALL_DIR/rig.conf ]]; then
  cp $INSTALL_DIR/rig.conf $INSTALL_DIR/hive-config/rig.conf
else
  echo -e "HIVE_HOST_URL=\"http://api.hiveos.farm\"" > $INSTALL_DIR/hive-config/rig.conf
  echo -e "FARM_HASH=$farm\n" >> $INSTALL_DIR/hive-config/rig.conf
fi

# Write image of configs partition
dd if=$conf_loop of=$INSTALL_DIR/new_conf.img > /dev/null 2>&1

# Rest of the script continues from where it left off
# ...

# Chroot to temp root
mount --bind /proc $INSTALL_DIR/proc
mount --bind /sys $INSTALL_DIR/sys
mount --bind /dev $INSTALL_DIR/dev
sync
cd $INSTALL_DIR
exec chroot . /bin/bash /$SCRIPT_NAME
}

function write {
  cd /

  arch=$(ls *hive*img.xz)
  conf_part=$root_dev"1"
  
  echo -e "\n\nCreate a HIVE OS File system on $root_dev"
  echo -e "\nPlease wait. This can take a long time."
  echo -e "To prevent damage to your disk device,\ndo not turn off your computer until the end of the process.\n"

  xzcat $arch | dd of=/dev/$root_dev status=progress bs=20M
  [[ $? -ne 0 ]] && "Write image failed. Exit" && return

  # Rewrite config partition
  partprobe > /dev/null 2>&1
  dd if=$INSTALL_DIR/new_conf.img of=/dev/$conf_part > /dev/null 2>&1

  # Reboot
  sync
  echo -e "\nCreate a HIVE OS File system on $root_dev successful!"

  echo -e "\nYour rig is configured and ready to work under Hive OS."
  echo "After the reboot, it will be automatically registered on the web"
  echo "as part of the farm whose FARM HASH you entered"
  echo
  echo -e "\nHappy mining!"
  echo "Reboot"
  sleep 15

  echo 1 > /proc/sys/kernel/sysrq
  echo b > /proc/sysrq-trigger
}

function sel {
  wr=0
  [[ -f replace.conf ]] && source /replace.conf
  if [[ $wr -eq 1 ]]; then
    write
  else
    prepare
  fi
}

sel
