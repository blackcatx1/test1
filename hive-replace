#!/bin/bash

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
SCRIPT_PATH=$(dirname $0)
SCRIPT_NAME=$(basename $0)
INSTALL_DIR="$HOME/hiveos-install" # Change this to your desired directory
url=""
root_dev=""
farm_hash=""
farm=""
thishive=0

GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
NOCOLOR=$(tput sgr0)

[[ $(uname -sr) == *hive* ]] && thishive=1

# Prevent starting from the local console
[[ $(tty) == *tty* || ! -z $DISPLAY ]] && { echo "This script doesn't work in the local console. Exiting."; exit 1; }

# Get root
if [[ $(id -u) -ne 0 ]]; then
  echo "Root privileges required"
  sudo chmod +x $0
  exec sudo $0
fi

function download_hive_image {
  # Download the HiveOS image file and place it in the chosen directory
  echo -e "${GREEN}\nDownloading HiveOS image${NOCOLOR}"
  wget -q --show-progress https://download.hiveos.farm/history/hiveos-0.6-222-stable@230512.img.xz -O $INSTALL_DIR/hiveos-0.6-222-stable@230512.img.xz
  if [[ $? -ne 0 ]]; then
    echo "${RED}Download Hive OS image failed. Check the URL${NOCOLOR}"
    exit 1
  fi
}

# Call the download function to fetch the HiveOS image
download_hive_image

function get {
  cd $INSTALL_DIR
  rm $INSTALL_DIR/*hive* > /dev/null 2>&1

  [[ ! -z $url ]] && echo -e "${GREEN}\nCurrent URL|path to HiveOS image is ${YELLOW}\"$url\"${GREEN}.\nIf this URL|path is correct, press ENTER, or re-type the correct URL|path.${NOCOLOR}"

  while true; do
    echo -en "${GREEN}\nLink|path to XZ-compressed HiveOS image (HTTP|FTP link or local|NFS path): ${NOCOLOR}"
    read answer
    [[ ! -z $answer ]] && url=$answer
    
    # Copy|download HiveOS image to the chosen directory
    echo -e "${GREEN}\nGet HiveOS image${NOCOLOR}"
    if [[ "$url" == *http* || "$url" == *ftp* ]]; then
      echo ""
      wget -t 5 --show-progress $url -O $INSTALL_DIR/hiveos-0.6-222-stable@230512.img.xz
      if [[ $? -ne 0 ]]; then
        echo "${RED}Download Hive OS image failed. Check URL${NOCOLOR}"
      else
        break  # Break out of the loop on successful download
      fi
    else
      [[ ! -f $url ]] && echo "${RED}Hive OS image not found. Check path${NOCOLOR}" || break  # Break out of the loop if the file exists
    fi
  done
}

function prepare {
  mem=$(free -m | awk 'NR == 2{print $2}')
  clear
  echo "***********************************"
  echo "${GREEN}Install HiveOS${NOCOLOR}"
  echo 
  echo "Total RAM=$mem Mb"
  echo
  [[ $mem -lt 3900 ]] && { echo "${YELLOW}4 Gb of memory required. Exit${NOCOLOR}"; exit 1; }

  PART_UUID=$(cat /proc/cmdline | tr " " "\n" | grep "UUID" | sed 's/\(^root=UUID=\)//')
  DISK_PART=$(blkid | grep -m1 $PART_UUID | awk '{ print $1 }' | sed 's/://' | sed 's/\(^\/dev\/\)//')
  DISK_NAME=$(echo ${DISK_PART} | sed 's/\([[:digit:]]\)//')
  DISK_SIZE=$(cat /proc/partitions | grep -w "${DISK_NAME}" | awk '{ printf("%.f",$3/1024)}')
  PART_SIZE=$(cat /proc/partitions | grep -w "${DISK_PART}" | awk '{ printf("%.f",$3/1024)}')

  echo -e "Current OS booted from ${GREEN}$DISK_NAME${NOCOLOR} and the whole drive size is ${YELLOW}$DISK_SIZE${NOCOLOR} MB"
  [[ $DISK_SIZE -lt 8192 ]] && { echo -e "\n${YELLOW}The minimum disk size for HiveOS is 8 Gb${NOCOLOR}"; exit 1; }
  echo -e "${RED}Warning: After installing HiveOS, all your data on ${GREEN}$DISK_NAME${NOCOLOR}${RED} will be lost!${NOCOLOR}"

  # Check for necessary programs
  programs=0
  dpkg -s lsof > /dev/null 2>&1 || programs=1
  dpkg -s curl > /dev/null 2>&1 || programs=1
  dpkg -s wget > /dev/null 2>&1 || programs=1
  dpkg -s unzip > /dev/null 2>&1 || programs=1
  if [[ $programs -ne 0 ]]; then
    echo "Install the necessary programs"
    apt-get update
    apt-get install -y lsof curl wget unzip
  fi

  # Create tmpfs
  mkdir $INSTALL_DIR > /dev/null 2>&1
  mount none $INSTALL_DIR -t tmpfs -o size=3000m

  # Get farm_hash or old config
  if [[ $thishive -eq 1 && -f $INSTALL_DIR/hive-config/rig.conf ]]; then
    cp $INSTALL_DIR/hive-config/rig.conf $INSTALL_DIR/
  else
    farm=""
    while [[ -z $farm ]]; do
      echo -en "${GREEN}\nType your FARM_HASH from Web-interface : ${NOCOLOR}"
      read farm
      [[ -z $farm ]] && { echo "${RED}FARM_HASH can't be empty. Please retype.${NOCOLOR}"; exit 1; }
    done
  fi
}

# Get HiveOS image
flag_get=1
while [[ $flag_get -ne 0 ]]; do
  get
  flag_get=$?
  if [[ $flag_get -ne 0 ]]; then
    repeat="y"
    echo -en "You want to try again (Y/n) : "
    read answer
    [[ ! -z $answer ]] && repeat=$answer
    [[ $repeat != y* && $repeat != Y* ]] && { echo -e "${YELLOW}\nBye, bye!${NOCOLOR}"; exit; }
  fi
done

# Disable kernel messages to tty
echo 0 > /proc/sys/kernel/printk
echo 1 > /proc/sys/kernel/sysrq
echo 0 > /proc/sysrq-trigger

# Stop services and remount RO
swapoff -a
echo -e "${YELLOW}\nStop services${NOCOLOR}"

[[ $thishive -eq 1 ]] && miner stop > /dev/null 2>&1 && killall xinit

for SOCKET in $(systemctl list-units -t socket | awk '{print $1}' | grep -v -e ssh | grep -v -e ssh | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions); do
  systemctl stop $SOCKET > /dev/null 2>&1
done

for SERVICE in $(systemctl list-units -t service | awk '{print $1}' | grep -v -e ssh | grep -v -e ssh | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions); do
  systemctl stop $SERVICE > /dev/null 2>&1
done

pid="1"
while [[ ! -z $pid ]]; do
  pid=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | sed '2!d' | awk '{print $2}')
  [[ -z $pid ]] && continue
  process=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | sed '2!d' | awk '{print $1}')
  echo -e "Kill $process"
  kill $pid
  sleep 1
done

for MOUNTS in $(cat /proc/mounts | grep $DISK_NAME | awk '{print $2}'); do
  mount -n -o remount,ro $MOUNTS > /dev/null 2>&1
done

## Get config partition and mount it to loop
arch=$(ls $INSTALL_DIR/*hive*img.xz)
xzcat $arch | dd of=$INSTALL_DIR/conf.img bs=1M count=50 iflag=fullblock > /dev/null 2>&1
begin_conf=$(( $(fdisk -l $INSTALL_DIR/conf.img | grep NTFS | awk '{print $2}') * 512 ))
conf_loop=$(losetup -f)
losetup -o $begin_conf $conf_loop $INSTALL_DIR/conf.img
mkdir $INSTALL_DIR/hive-config
mount $conf_loop $INSTALL_DIR/hive-config

if [[ -f $INSTALL_DIR/rig.conf ]]; then
  cp $INSTALL_DIR/rig.conf $INSTALL_DIR/hive-config/rig.conf
else
  echo -e "HIVE_HOST_URL=\"http://api.hiveos.farm\"" > $INSTALL_DIR/hive-config/rig.conf
  echo -e "FARM_HASH=$farm\n" >> $INSTALL_DIR/hive-config/rig.conf
fi

# Write image of configs partition
dd if=$conf_loop of=$INSTALL_DIR/new_conf.img > /dev/null 2>&1

# Create temp root
echo -e "${YELLOW}\nCreate a temporary root fs${NOCOLOR}"
mkdir -p $INSTALL_DIR/{proc,sys,run,dev,usr,var,oldroot,bin,sbin,lib,tmp,usr/lib,usr/share,usr/lib/x86_64-linux-gnu,lib/lsb}
cp -aR /{bin,sbin,etc} $INSTALL_DIR > /dev/null 2>&1
cp -aR /usr/{bin,sbin} $INSTALL_DIR/usr > /dev/null 2>&1
cp -aR /lib/x86_64-linux-gnu $INSTALL_DIR/lib > /dev/null 2>&1
cp -aR /lib64 $INSTALL_DIR > /dev/null 2>&1
cp -aR /usr/lib/sudo $INSTALL_DIR/usr/lib > /dev/null 2>&1
cp -a /usr/lib/x86_64-linux-gnu/libmpfr* $INSTALL_DIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
cp -a /usr/lib/x86_64-linux-gnu/libsigsegv* $INSTALL_DIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
cp -a /usr/lib/x86_64-linux-gnu/libgmp* $INSTALL_DIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
cp -aR /dev $INSTALL_DIR > /dev/null 2>&1
cp $0 $INSTALL_DIR > /dev/null 2>&1
chmod +x $INSTALL_DIR/$SCRIPT_NAME > /dev/null 2>&1

mount --bind /proc $INSTALL_DIR/proc
mount --bind /sys $INSTALL_DIR/sys
mount --bind /dev $INSTALL_DIR/dev

# Chroot to temp root
sync
chroot $INSTALL_DIR /bin/bash /$SCRIPT_NAME
}

function write {
  cd /

  arch=$(ls *hive*img.xz)
  conf_part=$root_dev"1"
  
  echo -e "\n\nCreate a HIVE OS File system on $root_dev"
  echo -e "\nPlease wait. This can take a long time."
  echo -e "To prevent damage to your disk device,\ndo not turn off your computer until the end of the process.\n"

  xzcat $arch | dd of=/dev/$root_dev status=progress bs=20M
  [[ $? -ne 0 ]] && { echo "Write image failed. Exiting."; exit 1; }

  # Rewrite config partition
  partprobe > /dev/null 2>&1
  dd if=$INSTALL_DIR/new_conf.img of=/dev/$conf_part > /dev/null 2>&1

  # Reboot
  sync
  echo -e "\nCreate a HIVE OS File system on $root_dev successful!"

  echo -e "\nYour rig is configured and ready to work under Hive OS."
  echo "After the reboot, it will be automatically registered on the web"
  echo "as part of the farm whose FARM HASH you entered"
  echo
  echo -e "\nHappy mining!"
  echo "Reboot"
  sleep 15

  echo 1 > /proc/sys/kernel/sysrq
  echo b > /proc/sysrq-trigger
}

function sel {
  wr=0
  [[ -f replace.conf ]] && source /replace.conf
  if [[ $wr -eq 1 ]]; then
    write
  else
    prepare
  fi
}

sel
